#+TITLE: This Is A Map for Working
#+DATE: 2019-07-01 Mon
#+AUTHOR: Dr Yufeng Lin
#+EMAIL: y.lin@cqu.edu.au
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.2.2 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+DRAWERS: ANSWER
#+STARTUP: content

* The Primer
** What is Version Control
Version control systems are a category of software tools that help a software team manage changes to source code over time. Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members.

For almost all software projects, the source code is like the crown jewels - a precious asset whose value must be protected. For most software teams, the source code is a repository of the invaluable knowledge and understanding about the problem domain that the developers have collected and refined through careful effort. Version control protects source code from both catastrophe and the casual degradation of human error and unintended consequences.

Software developers working in teams are continually writing new source code and changing existing source code. The code for a project, app or software component is typically organized in a folder structure or "file tree". One developer on the team may be working on a new feature while another developer fixes an unrelated bug by changing code, each developer may make their changes in several parts of the file tree.

Version control helps teams solve these kinds of problems, tracking every individual change by each contributor and helping prevent concurrent work from conflicting. Changes made in one part of the software can be incompatible with those made by another developer working at the same time. This problem should be discovered and solved in an orderly manner without blocking the work of the rest of the team. Further, in all software development, any change can introduce new bugs on its own and new software can't be trusted until it's tested. So testing and development proceed together until a new version is ready.

Good version control software supports a developer's preferred workflow without imposing one particular way of working. Ideally it also works on any platform, rather than dictate what operating system or tool chain developers must use. Great version control systems facilitate a smooth and continuous flow of changes to the code rather than the frustrating and clumsy mechanism of file locking - giving the green light to one developer at the expense of blocking the progress of others.

Software teams that do not use any form of version control often run into problems like not knowing which changes that have been made are available to users or the creation of incompatible changes between two unrelated pieces of work that must then be painstakingly untangled and reworked. If you're a developer who has never used version control you may have added versions to your files, perhaps with suffixes like "final" or "latest" and then had to later deal with a new final version. Perhaps you've commented out code blocks because you want to disable certain functionality without deleting the code, fearing that there may be a use for it later. Version control is a way out of these problems.

Version control software is an essential part of the every-day of the modern software team's professional practices. Individual software developers who are accustomed to working with a capable version control system in their teams typically recognize the incredible value version control also gives them even on small solo projects. Once accustomed to the powerful benefits of version control systems, many developers wouldn't consider working without it even for non-software projects.
** Team Work
*** centralized & distributed
* Git Introduction
** What is Git
[[https:/en.wikipedia.org][Git]] is a distributed version-control system for tracking changes in source code during software development. 
It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. 
Its goals include speed, data integrity, and support for distributed, non-linear workflows.
Git is free and open-source software distributed under the terms of the GNU General Public License version 2.

*** Performance
*** Security
*** Flexibility

** History
Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development. Its current maintainer since 2005 is Junio Hamano.

** Culture
** Installation of Git
*** Install Git on Mac OS X
There are several ways to install Git on a Mac. In fact, if you've installed XCode (or it's Command Line Tools), Git may already be installed. To find out, open a terminal and enter git --version.
#+BEGIN_SRC Sh
git --version
#+END_SRC

- Git for Mac Installer
  the latest [[https://sourceforge.net/projects/git-osx-installer/files/][Git for Mac installer]].
- Install Git with Homebrew
#+BEGIN_SRC sh
brew install git
#+END_SRC  
*** Install Git on Windows
The latest Git for [[https://gitforwindows.org/][Windows installe]].

*** Install Git on Linux
- Debian / Ubuntu
#+BEGIN_SRC sh
sudo apt-get update
sudo apt-get install git
#+END_SRC
*** Configure your Git username and email
Configure your Git username and email using the following commands, replacing "Your name" with your own. These details will be associated with any commits that you create:
#+BEGIN_SRC sh
git config --global user.name "Your name"
git config --global user.email "Your email address"
#+END_SRC
* Getting Started
** Basic settings 

$ git config --global user.name "Your Name"
$ git config --global user.email "youremail@example.com"

** Initialize a repository

1. create a folder for testing
#+BEGIN_SRC shell
mkdir learngit
cd learngit
pwd 
#+END_SRC

2. initialise a repository

#+BEGIN_SRC shell
git init
#+END_SRC
Initialized empty Git repository in /Users/ethanlin/Documents/ThingsEngine/ThingsEngine-Git/.git/

3. add a file name readme.md
"Git is a version control system.
Git is free software." in readme.md

4. add and commit

#+BEGIN_SRC shell
git add readme.txt

git commit -m "create a readme file"
#+END_SRC
[master (root-commit) eaadf4e] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 123456 readme.md

4. add more files
#+BEGIN_SRC shell
touch file1.txt file2.txt file3.txt
#+END_SRC

#+BEGIN_SRC shell
git add file1.txt
git add file2.txt file3.txt
#+END_SRC

#+BEGIN_SRC shell
git commit -m "add 3 files"
#+END_SRC

5. adjustment for readme.md
"Git is a distributed version control system.
Git is free software."

6. git status

#+BEGIN_SRC shell
git status
#+END_SRC
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)
 
	modified:   readme.txt
 
no changes added to commit (use "git add" and/or "git commit -a")

7. git diff

#+BEGIN_SRC shell
git diff readme.md
#+END_SRC

diff --git a/readme.md b/readme.md
index 46d49bf..9247db6 100644
--- a/readme.md
+++ b/readme.md
@@ -1,2 +1,2 @@
-Git *is* a version control system.
+Git *is* a distributed version control system.
 Git *is* free software.

8. update readme.md, new version

#+BEGIN_SRC shell
git add readme.md
#+END_SRC

#+BEGIN_SRC shell
git status
#+END_SRC
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)
 
    modified:   readme.md

#+BEGIN_SRC shell
git commit -m "add distributed"
#+END_SRC
[master e475afc] add distributed
 1 file changed, 1 insertion(+), 1 deletion(-)

#+BEGIN_SRC 
$ git status
#+END_SRC
On branch master
nothing to commit, working tree clean
* Remote Repository at GitHub
#+BEGIN_SRC shell
ssh-keygen -t rsa -c "youremail@example.com"
#+END_SRC

You could find a directory .ssh in your home folder. id_rsa and *id_rsa.pub*



* Advanced Topic
** Brench Management
** Bookmark Management
** Custimization
